{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","props","react_default","a","createElement","Form","onSubmit","getWeather","type","name","placeholder","Weather","className","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","apiCall","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","temp","sys","weather","stop","this","components_Titles","components_Form","components_Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ff94c58.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Titles = props => (\r\n  <div>\r\n    <h1>Weather Finder</h1>\r\n    <p>Find out temerature, conditions and more..</p>\r\n  </div>\r\n);\r\n\r\nexport default Titles;\r\n","import React from 'react';\r\n\r\nconst Form = props => (\r\n  <form onSubmit={props.getWeather}>\r\n    <input type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n    <input type=\"text\" name=\"country\" placeholder=\"Country...\" />\r\n    <button>Get Weather</button>\r\n  </form>\r\n);\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n\r\nconst Weather = props => (\r\n  <div className=\"weather-info\">\r\n    {props.city && props.country && (\r\n      <p className=\"weather-key\">\r\n        Location:\r\n        <span className=\"weather-value\">\r\n          {props.city}, {props.country}\r\n        </span>\r\n      </p>\r\n    )}\r\n    {props.temperature && (\r\n      <p className=\"weather-key\">\r\n        Temperature:\r\n        <span className=\"weather-value\">{props.temperature}C</span>\r\n      </p>\r\n    )}\r\n    {props.humidity && (\r\n      <p className=\"weather-key\">\r\n        Humidity:\r\n        <span className=\"weather-value\">{props.humidity}%</span>\r\n      </p>\r\n    )}\r\n    {props.description && (\r\n      <p className=\"weather-key\">\r\n        Conditions:\r\n        <span className=\"weather-value\">{props.description}</span>\r\n      </p>\r\n    )}\r\n    {props.error && (\r\n      <p className=\"weather-key\">\r\n        <span className=\"weather-error\">{props.error}</span>\r\n      </p>\r\n    )}\r\n  </div>\r\n);\r\n\r\nexport default Weather;\r\n","import React, { Component } from 'react';\nimport Titles from './components/Titles';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\nconst API_KEY = 'c23da5f35a835a76fc0d41a8e7552054';\n\nclass App extends Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  };\n\n  getWeather = async e => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const apiCall = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`\n    );\n    const data = await apiCall.json();\n\n    if (city && country) {\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: ''\n      });\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: 'Please enter the values'\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <main>\n          <div className=\"title-container\">\n            <Titles />\n          </div>\n          <div className=\"form-container\">\n            <Form getWeather={this.getWeather} />\n\n            <Weather\n              temperature={this.state.temperature}\n              city={this.state.city}\n              country={this.state.country}\n              humidity={this.state.humidity}\n              description={this.state.description}\n              error={this.state.error}\n            />\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}